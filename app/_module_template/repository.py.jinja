from typing import List, Optional
from sqlalchemy.orm import Session
from core.base.repository import BaseRepository
from __MODULE_NAME__.model import __CLASS_NAME__

class __CLASS_NAME__Repository(BaseRepository[__CLASS_NAME__]):
    def __init__(self, db: Session):
        super().__init__(db, __CLASS_NAME__)

    def find_by_completed(self, completed: bool, skip: int = 0, limit: int = 100) -> List[__CLASS_NAME__]:
        """
        Find __MODULE_NAME__ by completion status with pagination.
        
        Args:
            completed: The completion status to filter by
            skip: Number of records to skip for pagination (default: 0)
            limit: Maximum number of records to return (default: 100)
            
        Returns:
            List[__CLASS_NAME__]: List of __MODULE_NAME__ matching the criteria
        """
        return self.db.query(self.model_class).filter(
            self.model_class.completed == completed
        ).offset(skip).limit(limit).all()

    def find_by_title_contains(self, title: str, skip: int = 0, limit: int = 100) -> List[__CLASS_NAME__]:
        """
        Find __MODULE_NAME__ by title containing the given string.
        
        Args:
            title: The string to search for in titles
            skip: Number of records to skip for pagination (default: 0)
            limit: Maximum number of records to return (default: 100)
            
        Returns:
            List[__CLASS_NAME__]: List of __MODULE_NAME__ matching the criteria
        """
        return self.db.query(self.model_class).filter(
            self.model_class.title.contains(title)
        ).offset(skip).limit(limit).all()

    def toggle_completed(self, id: str) -> Optional[__CLASS_NAME__]:
        """
        Toggle the completed status of a __SINGULAR_NAME__.
        
        Args:
            id: The ID of the __SINGULAR_NAME__ to toggle
            
        Returns:
            Optional[__CLASS_NAME__]: The updated __SINGULAR_NAME__ or None if not found
        """
        __SINGULAR_VAR_NAME__ = self.find(id)
        if __SINGULAR_VAR_NAME__:
            __SINGULAR_VAR_NAME__.completed = not __SINGULAR_VAR_NAME__.completed
            self.db.commit()
            self.db.refresh(__SINGULAR_VAR_NAME__)
            return __SINGULAR_VAR_NAME__
        return None