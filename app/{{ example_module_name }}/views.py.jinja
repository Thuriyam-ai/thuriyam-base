from typing import List, Optional
from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from core.database import get_db
from {{ example_module_name }}.repository import {{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Repository
from {{ example_module_name }}.schema import {{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Create, {{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Update, {{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Response
from {{ example_module_name }}.model import {{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}
from core.base.model import ModelBuilder
from core.base.validator import Operation

router = APIRouter(prefix="/{{ example_module_name }}", tags=["{{ example_module_name }}"])

def get_{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_repository(db: Session = Depends(get_db)) -> {{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Repository:
    return {{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Repository(db)

@router.post("/", response_model={{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Response, summary="Create a new {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}", description="Create a new {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} item with the provided data")
async def create_{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}(
    {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_data: {{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Create,
    repo: {{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Repository = Depends(get_{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_repository)
):
    """
    Create a new {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} item.
    
    - **title**: The title of the {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} (required)
    - **description**: Optional description of the {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}
    - **completed**: Whether the {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} is completed (defaults to False)
    
    Returns the created {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} item with generated ID and timestamps.
    """
    {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} = ModelBuilder.for_model({{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}).with_operation(
        Operation.CREATE
    ).with_attributes(
        {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_data.model_dump(exclude_unset=True)
    ).build()
    {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} = repo.save({{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }})
    return {{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Response.model_validate({{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }})

@router.get("/", response_model=List[{{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Response], summary="Get all {{ example_module_name }}", description="Retrieve all {{ example_module_name }} with optional filtering and pagination")
async def get_{{ example_module_name }}(
    skip: int = Query(0, ge=0, description="Number of records to skip for pagination"),
    limit: int = Query(100, ge=1, le=1000, description="Maximum number of records to return"),
    completed: Optional[bool] = Query(None, description="Filter by completion status (true/false)"),
    title: Optional[str] = Query(None, description="Search by title containing this text"),
    repo: {{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Repository = Depends(get_{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_repository)
):
    """
    Get all {{ example_module_name }} with optional filtering and pagination.
    
    - **skip**: Number of records to skip (for pagination)
    - **limit**: Maximum number of records to return (1-1000)
    - **completed**: Filter by completion status (optional)
    - **title**: Search by title containing text (optional)
    
    Returns a list of {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} items matching the criteria.
    """
    if completed is not None:
        return repo.find_by_completed(completed, skip, limit)
    elif title:
        return repo.find_by_title_contains(title, skip, limit)
    else:
        return repo.find_all(skip, limit)

@router.get("/{{ '{' }}{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_id{{ '}' }}", response_model={{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Response, summary="Get a specific {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}", description="Retrieve a specific {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} by its ID")
async def get_{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}(
    {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_id: str,
    repo: {{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Repository = Depends(get_{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_repository)
):
    """
    Get a specific {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} by ID.
    
    - **{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_id**: The unique identifier of the {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}
    
    Returns the {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} item if found, otherwise returns 404.
    """
    {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} = repo.find({{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_id)
    if not {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}:
        raise HTTPException(status_code=404, detail="{{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }} not found")
    return {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}

@router.put("/{{ '{' }}{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_id{{ '}' }}", response_model={{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Response, summary="Update a {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}", description="Update an existing {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} with new data")
async def update_{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}(
    {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_id: str,
    {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_data: {{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Update,
    repo: {{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Repository = Depends(get_{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_repository)
):
    """
    Update an existing {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}.
    
    - **{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_id**: The unique identifier of the {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} to update
    - **{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_data**: The updated {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} data (all fields are optional for partial updates)
    
    Returns the updated {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} item if found, otherwise returns 404.
    """
    # Filter out None values for partial update
    update_data = {k: v for k, v in {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_data.model_dump().items() if v is not None}
    
    if not update_data:
        raise HTTPException(status_code=400, detail="No valid fields to update")
    
    {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} = repo.update({{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_id, update_data)
    if not {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}:
        raise HTTPException(status_code=404, detail="{{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }} not found")
    return {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}

@router.patch("/{{ '{' }}{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_id{{ '}' }}/toggle", response_model={{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Response, summary="Toggle {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} completion", description="Toggle the completed status of a {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}")
async def toggle_{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}(
    {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_id: str,
    repo: {{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Repository = Depends(get_{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_repository)
):
    """
    Toggle the completed status of a {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}.
    
    - **{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_id**: The unique identifier of the {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} to toggle
    
    Switches the completed status from true to false or vice versa.
    Returns the updated {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} item if found, otherwise returns 404.
    """
    {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} = repo.toggle_completed({{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_id)
    if not {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}:
        raise HTTPException(status_code=404, detail="{{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }} not found")
    return {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}

@router.delete("/{{ '{' }}{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_id{{ '}' }}", summary="Delete a {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}", description="Delete a {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} by its ID")
async def delete_{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}(
    {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_id: str,
    repo: {{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }}Repository = Depends(get_{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_repository)
):
    """
    Delete a {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} by ID.
    
    - **{{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_id**: The unique identifier of the {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} to delete
    
    Returns a success message if the {{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }} was deleted, otherwise returns 404.
    """
    success = repo.delete({{ example_module_name[:-1] if example_module_name.endswith('s') else example_module_name }}_id)
    if not success:
        raise HTTPException(status_code=404, detail="{{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }} not found")
    return {"message": "{{ (example_module_name[:-1] if example_module_name.endswith('s') else example_module_name) | title }} deleted successfully"} 