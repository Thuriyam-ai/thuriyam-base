from typing import List
from pydantic import BaseModel
from passlib.context import CryptContext
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, SecurityScopes
from sqlalchemy.orm import Session
from core.security.jwt import decode_token
from core.settings import get_config
from core.services.feature_flags import FeatureFlagsService

settings = get_config()
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

oauth2_scheme = OAuth2PasswordBearer(
    tokenUrl=f"{settings.API_PREFIX}/users/token",
    scopes={
        "me": "Read information about the current user.",
        "users": "Read information about all users.",
        "admin": "Admin access to all operations.",
        "campaigns:read": "Read campaign information.",
        "campaigns:write": "Create and update campaigns.",
        "campaigns:manage": "Full campaign management including status changes."
    }
)

class User(BaseModel):
    username: str
    roles: List[str]

def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)

async def get_current_user(
    security_scopes: SecurityScopes,
    token: str = Depends(oauth2_scheme),
    feature_flags: FeatureFlagsService = Depends(FeatureFlagsService)
) -> User:
    """
    Get the current authenticated user.
    
    Args:
        security_scopes: The required security scopes for the endpoint
        token: The OAuth2 access token
        db: Database session
        
    Returns:
        User: The authenticated user object
        
    Raises:
        HTTPException: If credentials are invalid or user doesn't have required scopes
    """
    if security_scopes.scopes:
        authenticate_value = f'Bearer scope="{security_scopes.scope_str}"'
    else:
        authenticate_value = "Bearer"
    
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": authenticate_value},
    )
    
    try:
        payload = decode_token(token)
        if payload is None:
            raise credentials_exception
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_scopes = payload.get("scopes", [])
        for scope in security_scopes.scopes:
            if scope not in token_scopes:
                raise HTTPException(
                    status_code=status.HTTP_403_FORBIDDEN,
                    detail="Not enough permissions",
                    headers={"WWW-Authenticate": authenticate_value},
                )
    except Exception:
        print(f"Exception: {Exception}")
        raise

    value = feature_flags.get_value("check_user", username)
    if value!="off":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions",
            headers={"WWW-Authenticate": authenticate_value},
        )
    
    return User(username=username, roles=token_scopes) 