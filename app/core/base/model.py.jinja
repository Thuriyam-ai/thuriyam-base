from sqlalchemy.orm import declarative_base
from sqlalchemy import Column, String, DateTime
from datetime import datetime, timezone
from .validator import Operation, BaseValidator
from typing import Any, Dict, Type
import copy
import uuid

Base = declarative_base()

class BaseModel(Base):
    """
    Base model class that all models should inherit from.
    Provides common fields and functionality.
    """
    __abstract__ = True

    id = Column(String, primary_key=True)
    created_at = Column(DateTime(timezone=True), default=datetime.now(timezone.utc))
    created_by = Column(String, nullable=True)
    updated_at = Column(DateTime(timezone=True), default=datetime.now(timezone.utc), onupdate=datetime.now(timezone.utc))
    deleted_at = Column(DateTime(timezone=True), nullable=True)
    # TODO: Check if this is the right {{ python_module_name }}roach to handle deleted_by audit trail
    deleted_by = Column(String, nullable=True)

    _unset = []

    def unset(self, attributes: Dict[str, Any]) -> None:
        """Remove specified attributes from the input dictionary"""
        for key in self._unset:
            attributes.pop(key, None)

    def set_attributes(self, attributes: Dict[str, Any]) -> None:
        """Set object attributes from dictionary"""
        for key, value in attributes.items():
            setattr(self, key, value)


# Remove generics from ModelBuilder and cleanup the code
class ModelBuilder():
    """
    A generic model builder that can create instances of any model type.
    Provides a fluent interface for building models with validation.
    """
    
    def __init__(self, model_class: Type):
        """
        Initialize the model builder with a specific model class.
        
        Args:
            model_class: The class of the model to build
        """
        self.model_class = model_class
        self.operation = Operation.CREATE
        self.attributes: Dict[str, Any] = {}
        self._auto_generate_id = True
    
    def with_operation(self, operation: Operation) -> 'ModelBuilder':
        """
        Set the operation type for validation.
        
        Args:
            operation: The operation type (CREATE, UPDATE, DELETE)
            
        Returns:
            Self for method chaining
        """
        self.operation = operation
        return self
    
    def with_attributes(self, attributes: Dict[str, Any]) -> 'ModelBuilder':
        """
        Set the attributes for the model.
        
        Args:
            attributes: Dictionary of attributes to set
            
        Returns:
            Self for method chaining
        """
        self.attributes = copy.deepcopy(attributes)
        return self
    
    def with_attribute(self, key: str, value: Any) -> 'ModelBuilder':
        """
        Set a single attribute for the model.
        
        Args:
            key: Attribute name
            value: Attribute value
            
        Returns:
            Self for method chaining
        """
        self.attributes[key] = value
        return self
    
    def without_auto_id(self) -> 'ModelBuilder':
        """
        Disable automatic ID generation.
        
        Returns:
            Self for method chaining
        """
        self._auto_generate_id = False
        return self
    
    def build(self) -> Any:
        """
        Build and return a new instance of the model.
        
        Returns:
            A new instance of the model type T
            
        Raises:
            Exception: If validation fails
        """
        # Create new instance of the model class
        instance = self.model_class()
        
        # Deep copy attributes to avoid modifying original
        attributes = copy.deepcopy(self.attributes)
        
        # Generate ID if needed and not provided
        if self._auto_generate_id and 'id' not in attributes:
            attributes['id'] = str(uuid.uuid4())
        
        # Remove unset attributes
        instance.unset(attributes)
        
        # Validate input data using the validator registry
        try:
            BaseValidator.get_instance().validate(self.model_class, self.operation, attributes)
        except Exception as e:
            raise Exception(f"Validation failed for {self.model_class.__name__}: {str(e)}")
        
        # Set validated attributes
        instance.set_attributes(attributes)
        
        return instance
    
    @classmethod
    def for_model(cls, model_class: Type) -> 'ModelBuilder':
        """
        Create a new ModelBuilder for the specified model class.
        
        Args:
            model_class: The class of the model to build
            
        Returns:
            A new ModelBuilder instance
        """
        return cls(model_class)


# Convenience function for quick model building
def build_model(model_class: Type, attributes: Dict[str, Any], operation: Operation = Operation.CREATE) -> Any:
    """
    Convenience function to quickly build a model instance.
    
    Args:
        model_class: The class of the model to build
        attributes: Dictionary of attributes to set
        operation: The operation type for validation (default: CREATE)
        
    Returns:
        A new instance of the model type T
    """
    return (ModelBuilder.for_model(model_class)
            .with_operation(operation)
            .with_attributes(attributes)
            .build()) 