from datetime import timedelta
from typing import Optional
from fastapi import Depends, HTTPException, status
from sqlalchemy.orm import Session
from core.settings import get_config
from core.database import get_db
from core.base.model import ModelBuilder, Operation
from core.security.auth import verify_password, get_password_hash
from core.security.jwt import create_access_token
from {{ entity }}.model import {{ entity.title() }}
from {{ entity }}.schema import {{ entity.title() }}Create, {{ entity.title() }}Update
from {{ entity }}.repository import {{ entity.title() }}Repository

settings = get_config()

class {{ entity.title() }}Service:
    def __init__(self, db: Session = Depends(get_db)):
        self.repository = {{ entity.title() }}Repository(db)

    def create{{ entity.title() }}(self, input: {{ entity.title() }}Create) -> {{ entity.title() }}:
        # TODO: Validate user input

        # Building a model using the ModelBuilder instead of the existing build function.
        {{ entity }} = ModelBuilder.for_model({{ entity.title() }}).with_operation(
            Operation.CREATE
        ).with_attributes(
            input.model_dump(exclude_unset=True)
        ).build()

        return self.repository.save({{ entity }})

    def update(self, id: str, input: {{ entity.title() }}Update) -> Optional[{{ entity.title() }}]:
        # TODO: Add validation for the input

        # Update the {{ entity }} with the input data
        return self.repository.update(
            id, 
            input.model_dump(exclude_unset=True)
        )

    def delete(self, id: str) -> bool:
        # TODO: Add validation for the input

        # Delete the {{ entity }} with the given id
        return self.repository.delete(id)

    def list(self, skip: int = 0, limit: int = 100) -> list[{{ entity.title() }}]:
        return self.repository.find_all(skip=skip, limit=limit) 