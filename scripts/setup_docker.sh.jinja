#!/bin/bash

# {{ project_name.title() }} Docker Setup Script
# This script sets up the Docker environment with PostgreSQL

set -e

echo "üê≥ Setting up {{ project_name.title() }} Docker Environment..."

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker is not running. Please start Docker and try again."
    exit 1
fi

# Check if docker-compose is available
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå docker-compose is not installed. Please install it and try again."
    exit 1
fi

# Navigate to build directory
cd "$(dirname "$0")/../build"

echo "üì¶ Starting Docker services..."
docker-compose up -d

echo "‚è≥ Waiting for services to be ready..."
sleep 10

{% if use_postgres -%}
# Check if PostgreSQL is ready
echo "üîç Checking PostgreSQL connection..."
if docker-compose exec -T postgres pg_isready -U {{ database_user }} -d {{ database_name }}; then
    echo "‚úÖ PostgreSQL is ready!"
    
    # Check if database exists, create if it doesn't
    echo "üîç Checking if database exists..."
    db_exists=$(docker-compose exec -T postgres psql -U {{ database_user }} -lqt | cut -d \| -f 1 | grep -qw {{ database_name }} || echo "not_found")
    
    if [ "$db_exists" = "not_found" ]; then
        echo "üìä Database '{{ database_name }}' not found. Creating database..."
        docker-compose exec -T postgres createdb -U {{ database_user }} {{ database_name }}
        echo "‚úÖ Database '{{ database_name }}' created successfully!"
    else
        echo "‚úÖ Database '{{ database_name }}' already exists"
    fi
    
    # Check if tables exist
    echo "üîç Checking if database tables exist..."
    table_count=$(docker-compose exec -T postgres psql -U {{ database_user }} -d {{ database_name }} -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" | tr -d ' ')
    
    if [ "$table_count" -eq 0 ]; then
        echo "üìä No tables found. Database will be initialized on first application start."
        {% if include_alembic -%}
        docker compose exec -T {{ project_name }} alembic upgrade head
        echo "‚úÖ Database '{{ project_name }}' migrations applied successfully!"
        {% endif -%}
    else
        echo "‚úÖ Found $table_count existing tables"
    fi
else
    echo "‚ùå Failed to connect to PostgreSQL"
    echo "üîç Checking PostgreSQL logs..."
    docker-compose logs postgres
    exit 1
fi
{% else -%}
echo "‚úÖ Using SQLite database - no setup required"
{% endif -%}

# Check if the application is responding
echo "üîç Checking application health..."
sleep 5

if curl -f http://localhost:8000/ > /dev/null 2>&1; then
    echo "‚úÖ Application is running and healthy!"
else
    echo "‚ö†Ô∏è  Application may still be starting up..."
    echo "üîç Checking application logs..."
    docker-compose logs --tail=20 {{ project_name }}
fi

echo ""
echo "üéâ Docker environment setup complete!"
echo ""
echo "üì± Services are running:"
echo "  ‚Ä¢ Application: http://localhost:8000"
echo "  ‚Ä¢ API Documentation: http://localhost:8000/docs"
{% if use_postgres -%}
echo "  ‚Ä¢ PostgreSQL: localhost:5432"
{% endif -%}
echo "  ‚Ä¢ Redis: localhost:6379"
echo "  ‚Ä¢ MongoDB: localhost:27017"
echo "  ‚Ä¢ Kafka: localhost:9092"
echo "  ‚Ä¢ StatsD: localhost:9125"
echo ""
echo "üõ†Ô∏è  Useful commands:"
echo "  ‚Ä¢ View logs: docker-compose logs -f {{ project_name }}"
echo "  ‚Ä¢ Stop services: docker-compose down"
echo "  ‚Ä¢ Restart app: docker-compose restart {{ project_name }}"
{% if include_alembic -%}
echo "  ‚Ä¢ Run migrations: docker compose exec -T {{ project_name }} alembic upgrade head"
echo "  ‚Ä¢ Add new migrations: docker compose exec -T {{ project_name }} alembic revision --autogenerate -m 'Initial Service Migration'"
{% endif -%}
echo "" 