[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "{{ project_name }}"
version = "{{ version }}"
description = "{{ service_description }}"
requires-python = ">=3.11,<3.12"
authors = [
    {name = "{{ author_name }}", email = "{{ author_email }}"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    # Web Framework
    "fastapi==0.115.6",
    "uvicorn[standard]==0.34.0",
    
    # Database
    "sqlalchemy==2.0.28",
    "pydantic==2.11.7",
    "pydantic-settings==2.2.1",
    "psycopg2-binary==2.9.9",
    # AWS & Cloud Services
    "boto3==1.34.106",
    "pyathena==3.0.10",
    
    # Async & Performance
    "uvloop==0.21.0",
    "httptools==0.6.4",
    "nest-asyncio==1.6.0",
    
    # Data Processing
    "pymongo==4.6.1",
    "motor==3.3.2",
    
    # Redis
    "redis[hiredis]==5.0.1",
    
    # HTTP & API
    "requests==2.31.0",
    
    # CLI
    "typer==0.15.1",
    
    # Feature Flags
    "flagsmith==3.7.0",
    
    # Monitoring & Observability
    "elastic-apm==6.18.0",
    "datadog==0.50.2",
    
    # Utilities
    "pytz==2024.1",
    "python-decouple==3.8",
    "base58==2.1.1",
    
    # Security & Authentication
    "passlib[bcrypt]==1.7.4",
    "python-jose[cryptography]==3.3.0",
    "python-multipart==0.0.6",
    "email-validator>=2.2",
    "flagsmith>=3.7.0",
]

[project.optional-dependencies]
dev = [
    "pre-commit==2.9.2",
    "flake8-async==24.11.4",
    "alembic==1.14.0",
    ]

test = [
    # Testing framework
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "pytest-cov==4.1.0",
    "pytest-mock==3.12.0",
    "pytest-xdist==3.3.1",
    "pytest-html==4.1.1",
    "pytest-json-report==1.5.0",
    # Coverage reporting
    "coverage==7.3.2",
    # Mocking and faking
    "faker==20.1.0",
    "factory-boy==3.3.0",
    # Database testing
    "pytest-sqlalchemy==0.1.0",
    # HTTP testing
    "httpx==0.25.2",
    "pytest-httpx==0.25.0",
    # Performance testing
    "pytest-benchmark==4.0.0",
]

# Code quality tools (can be installed with: uv add --dev ".[dev,test]")
code-quality = [
    "black==24.1.1",
    "flake8==7.0.0",
    "isort==5.13.2",
    "mypy==1.8.0",
]

# Security testing
security = [
    "bandit==1.7.7",
    "pip-audit==2.6.1",
]

# For environments that need the same as base
production = []
staging = []

[tool.pytest.ini_options]
pythonpath = ["app"]
testpaths = ["test"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--color=yes",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--junitxml=test-results.xml",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "security: Security related tests",
    "database: Database related tests",
    "api: API related tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]

[tool.black]
line-length = 79
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
''' 

[tool.uv]
dev-dependencies = [
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "pytest-cov==4.1.0",
    "pytest-mock==3.12.0",
    "pytest-xdist==3.3.1",
    "pytest-html==4.1.1",
    "pytest-json-report==1.5.0",
    "coverage==7.3.2",
    "faker==20.1.0",
    "factory-boy==3.3.0",
    "pytest-sqlalchemy==0.1.0",
    "httpx==0.25.2",
    "pytest-httpx==0.25.0",
    "pytest-benchmark==4.0.0",
    "black==24.1.1",
    "flake8==7.0.0",
    "isort==5.13.2",
    "mypy==1.8.0",
    "bandit==1.7.7",
    "pip-audit==2.6.1",
]

[tool.uv.workspace]
members = [
    ".",
    ".",
]

[tool.uv.sources]
{{ project_name}} = { workspace = true }
