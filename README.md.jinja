# {{ project_name | title }}

{{ service_description }}

## Overview

This is a production-ready FastAPI microservice built with modern Python technologies and following clean architecture principles. The service includes:

### 🚀 **Core Features**
- **FastAPI** application with automatic OpenAPI documentation
- **SQLAlchemy ORM** with PostgreSQL or SQLite support
- **Pydantic** schemas for data validation
- **Repository pattern** for clean data access layer
- **Model builder pattern** with comprehensive validation
- **Environment-based configuration** (dev/prod/docker)
- **Health check endpoints**

### 🔐 **Security & Authentication**
- **JWT authentication** support
- **CORS middleware** configuration
- Input validation and sanitization
- Secure password handling

### 🐳 **Docker & Infrastructure**
- **Multi-stage Docker setup** (development & production)
- **Docker Compose** with PostgreSQL, Redis, MongoDB, Kafka
- **Development hot-reload** with volume mounting
- **Production-optimized** containers

### 🛠 **Development Tools**
- **Database migrations** with Alembic
- **Management scripts** for common tasks
- **Database initialization** scripts
- **Testing utilities**
- **Environment setup** scripts

### 📊 **Monitoring & Observability**
- **StatsD integration** for metrics
- **Comprehensive logging** configuration
- **Health check endpoints**
- **Service adapters** for external systems
- Health check endpoint at `/health`

## Quick Start

### Prerequisites

- Python 3.11+
- Docker & Docker Compose (recommended)
- UV package manager

### Installation

1. **Create virtual environment and install dependencies:**
```bash
uv venv
source .venv/bin/activate  # Windows: .venv\Scripts\activate
uv sync
```

2. **Configure environment (Optional):**
```bash
cp env.example .env
# Edit .env with your settings
```

3. **Start the service:**

**Full Docker environment**
```bash
cd build
docker compose up -d
```

## Project Structure

```
{{ project_name }}/
├── build/                          # Docker infrastructure
│   ├── docker-compose.yml         # Multi-service Docker setup
│   ├── docker.env                 # Docker environment variables
│   └── README.md                  # Docker setup documentation
├── scripts/                        # Utility scripts
│   ├── setup_docker.sh            # Docker environment setup
│   ├── test_db_connection.py      # Connection testing
│   └── generate-jwt-30-mins.py    # JWT token generation
├── app/                            # Main application code
│   ├── main.py                    # CLI entry point
│   ├── app.py                     # FastAPI application
│   ├── core/                      # Core infrastructure
│   │   ├── settings/              # Environment configurations
│   │   ├── base/                  # Base classes (Model, Repository, etc.)
│   │   ├── security/              # Authentication and security
│   │   ├── database.py            # Database configuration
│   │   └── adapter/               # Adapter classes
{% for entity in entities %}│   ├── {{ entity }}/                   # {{ entity | title }} module
│   │   ├── __init__.py            # Module initialization
│   │   ├── model.py               # Database model
│   │   ├── schema.py              # Pydantic schemas
│   │   ├── repository.py          # Data access layer
│   │   ├── service.py             # Business logic layer
│   │   ├── validator.py           # Input validation
│   │   └── views.py               # API endpoints
{% endfor %}│   ├── DockerfileLocal             # Development container
│   ├── DockerfileProd             # Production container
│   ├── alembic.ini                # Alembic configuration
│   └── alembic/                   # Database migrations
│       └── versions/              # Migration files
├── README.md                       # Project documentation
└── env.example                    # Environment variables template
```

## Development Workflow

### 1. Local Development

**Start the development server:**
```bash
cd build
docker compose up -d
```

**Run with hot reload:**

Enabled by default. In order to disable, remove `--reload` from the following line
```bash
    command: bash -c "python3 main.py runserver --host 0.0.0.0 --port 8000 --reload"
```

### 2. Making Changes

**Add new endpoints:**
1. Update models in the appropriate module's `model.py`
2. Create/update schemas in `schema.py`
3. Add business logic in `service.py`
4. Add API endpoints in `views.py`

**Database changes:**
```bash
# Create migration
docker compose exec -T {{ project_name }} alembic revision --autogenerate -m "Description"

# Apply migrations
docker compose exec -T {{ project_name }} alembic upgrade head
```

### 3. Some Handy Scripts

**Generate test JWT tokens for local testing:**
```bash
python scripts/generate-jwt-30-mins.py
```

**Test database connection:**
```bash
python scripts/test_db_connection.py
```

## Docker Environment

This project includes a complete Docker Compose setup with:

- **{{ project_name }}** FastAPI service (port 8000)
- **PostgreSQL** database (port 5432)
- **Redis** cache (port 6379) 
- **MongoDB** NoSQL (port 27017)
- **Apache Kafka** messaging (port 9092)
- **StatsD** metrics (port 9125)

### Quick Docker Setup

```bash
cd build
./scripts/setup_docker.sh  # Automated setup
```

### Docker Commands

**Start all services:**
```bash
docker compose up -d
```

**View logs:**
```bash
docker compose logs -f {{ project_name }}
```

**Stop services:**
```bash
docker compose down
```

## Database Migrations with Alembic

This project uses Alembic for database migrations. Alembic is a database migration tool for SQLAlchemy that allows you to manage database schema changes over time.

### Migration Setup

1. **Alembic is pre-configured** in the project
2. **Models are automatically detected** from all modules
3. **Environment configuration** is handled automatically

### Common Migration Commands

#### Creating New Migrations

Create a new migration based on model changes:
```bash
docker compose exec -T {{ project_name }} alembic revision --autogenerate -m "Add new field to users table"
```

#### Running Migrations

Apply all pending migrations:
```bash
docker compose exec -T {{ project_name }} alembic upgrade head
```

#### Checking Migration Status

View current migration revision:
```bash
docker compose exec -T {{ project_name }} alembic current
```

View migration history:
```bash
docker compose exec -T {{ project_name }} alembic history
```

#### Rolling Back Migrations

Rollback one migration:
```bash
docker compose exec -T {{ project_name }} alembic downgrade -1
```

Rollback to specific revision:
```bash
docker compose exec -T {{ project_name }} alembic downgrade abc123
```

### Migration Workflow

1. **Make model changes**: Update your SQLAlchemy models in the appropriate module files
2. **Generate migration**: Run `docker compose exec -T {{ project_name }} alembic revision --autogenerate -m "Description of changes"`
3. **Review migration**: Check the generated migration file in `app/alembic/versions/`
4. **Apply migration**: Run `docker compose exec -T {{ project_name }} alembic upgrade head`
5. **Test**: Verify your changes work as expected

### Important Migration Notes

- **Always review auto-generated migrations** before applying them
- **Test migrations in development** before applying to production
- **Keep migrations small and focused** on specific changes
- **Never modify existing migration files** that have been applied to production
- **Use descriptive migration messages** for better tracking

### Migration Troubleshooting

#### Common Issues

1. **Migration conflicts**: If you have conflicts between migrations, you may need to merge them manually
2. **Model import errors**: Ensure all models are imported in `app/alembic/env.py`
3. **Database connection issues**: Check your database configuration in settings

#### Getting Help

- Check [Alembic documentation](https://alembic.sqlalchemy.org/)
- Review the generated migration files in `app/alembic/versions/`
- Test migrations in a development environment first

## Customization

### Adding New Entities

To add a new entity to this service, follow this pattern:

1. **Create entity directory** under `app/` with these files:
   - `model.py` - SQLAlchemy database model
   - `schema.py` - Pydantic schemas for request/response
   - `repository.py` - Data access layer
   - `service.py` - Business logic layer
   - `validator.py` - Input validation
   - `views.py` - FastAPI API endpoints
   - `__init__.py` - Module registration

2. **Register the entity** in `app/app.py`:
   ```python
   from .new_entity.views import router as new_entity_router
   app.include_router(new_entity_router, prefix="/api/v1", tags=["new_entity"])
   ```

3. **Create database migration**:
   ```bash
   docker compose exec -T {{ project_name }} alembic revision --autogenerate -m "Add new_entity table"
   docker compose exec -T {{ project_name }} alembic upgrade head
   ```

### Environment Configuration

This service supports multiple environments via the `FLAVOUR` environment variable:
- **Development** (`FLAVOUR=dev`) - Debug enabled, detailed logging
- **Production** (`FLAVOUR=prod`) - Optimized, docs disabled  
- **Docker** (`FLAVOUR=docker`) - Full Docker environment with all services

### Configuration Files

- **Environment variables**: `env.example` - Copy to `.env` and configure
- **Docker settings**: `build/docker.env` - Docker-specific environment
- **Application settings**: `app/core/settings/` - Environment-specific configurations

## Support & Documentation

- **API Documentation**: Available at [`/docs`](http://localhost:8000/docs) when running the service
- **OpenAPI Spec**: Available at [`/openapi.json`](http://localhost:8000/openapi.json) when running the service
- **Health Check**: Available at [`/health`](http://localhost:8000/health) when running the service
- **Docker Setup**: See `build/README.md` for Docker-specific documentation
- **Environment Configuration**: Check `env.example` for available settings

## Available Endpoints

{% for entity in entities %}- **{{ entity | title }} API**: `http://localhost:8000/api/v1/{{ entity }}` - {{ entity | title }} CRUD operations
{% endfor %}

## Architecture

This service follows clean architecture principles:

- **Models**: Database entities using SQLAlchemy ORM
- **Schemas**: Pydantic models for request/response validation
- **Repositories**: Data access layer abstracting database operations
- **Services**: Business logic layer containing domain rules
- **Views**: API endpoints handling HTTP requests/responses
- **Validators**: Input validation and sanitization

## License

Powered by {{ org_name }} microservice architecture. 